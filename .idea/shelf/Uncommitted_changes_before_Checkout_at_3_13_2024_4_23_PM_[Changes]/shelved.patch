Index: src/main/java/com/example/hospitaldeliveryinterface/CreateOrderController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.hospitaldeliveryinterface;\r\n\r\nimport com.google.api.core.ApiFuture;\r\nimport com.google.cloud.firestore.DocumentReference;\r\nimport com.google.cloud.firestore.WriteResult;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.TextArea;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.text.Text;\r\nimport javafx.stage.Stage;\r\n\r\nimport java.io.IOException;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class CreateOrderController {\r\n\r\n    @FXML\r\n    private TextArea addNotesTextfield;\r\n\r\n    @FXML\r\n    private TextField doseNumTextfield;\r\n\r\n    @FXML\r\n    private TextField doseTextfield;\r\n\r\n    @FXML\r\n    private TextField firstnameTextfield;\r\n\r\n    @FXML\r\n    private TextField lastnameTextfield;\r\n\r\n    @FXML\r\n    private TextField medDescTextfield;\r\n\r\n    @FXML\r\n    private TextField locationTextfield;\r\n\r\n    @FXML\r\n    private Label errorMessTextfield;\r\n\r\n    TextField[] allInputs;\r\n\r\n\r\n    public void initialize(){\r\n\r\n        errorMessTextfield.setText(\"\");\r\n        allInputs = new TextField[]{\r\n                firstnameTextfield,\r\n                lastnameTextfield,\r\n                medDescTextfield,\r\n                locationTextfield,\r\n                doseNumTextfield,\r\n                doseTextfield\r\n        };\r\n\r\n\r\n        firstnameTextfield.textProperty().addListener((observableValue, s, t1) -> {\r\n            if(!t1.isEmpty()){\r\n                defaultBorder(firstnameTextfield);\r\n            }\r\n        });\r\n        lastnameTextfield.textProperty().addListener((observableValue, s, t1) -> {\r\n            if(!t1.isEmpty()){\r\n                defaultBorder(lastnameTextfield);\r\n            }\r\n        });\r\n        medDescTextfield.textProperty().addListener((observableValue, s, t1) -> {\r\n            if(!t1.isEmpty()){\r\n                defaultBorder(medDescTextfield);\r\n            }\r\n        });\r\n        locationTextfield.textProperty().addListener((observableValue, s, t1) -> {\r\n            if(!t1.isEmpty()){\r\n                defaultBorder(locationTextfield);\r\n            }\r\n        });\r\n        doseNumTextfield.textProperty().addListener((observableValue, s, t1) -> {\r\n            if(!t1.isEmpty()){\r\n                defaultBorder(doseNumTextfield);\r\n            }\r\n        });\r\n        doseTextfield.textProperty().addListener((observableValue, s, t1) -> {\r\n            if(!t1.isEmpty()){\r\n                defaultBorder(doseTextfield);\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n\r\n    @FXML\r\n    protected void onCancelForm(ActionEvent event) throws IOException {\r\n        Node source = (Node) event.getSource();\r\n        Stage stage = (Stage) source.getScene().getWindow();\r\n        stage.close();\r\n    }\r\n\r\n    @FXML\r\n    void onCreateForm(ActionEvent event) {\r\n        boolean checkErrors = false;\r\n        for (TextField child: allInputs){\r\n            if(child.getText().isEmpty()){\r\n                errorBorder(child);\r\n                checkErrors = true;\r\n            }\r\n        };\r\n\r\n        if(checkErrors){\r\n            errorMessTextfield.setText(\"**Error: Please fill out all required fields.**\");\r\n        }else{\r\n            try {\r\n                int numDose = Integer.parseInt(doseNumTextfield.getText());\r\n\r\n                DeliveryRequisition newOrder = new DeliveryRequisition(\r\n                        firstnameTextfield.getText(),\r\n                        lastnameTextfield.getText(),\r\n                        locationTextfield.getText(),\r\n                        medDescTextfield.getText(),\r\n                        doseTextfield.getText(),\r\n                        numDose\r\n                        );\r\n                Pending pendQueue = Pending.getInstance();\r\n                pendQueue.addOrders(newOrder);\r\n                navHomePage();\r\n            }catch (NumberFormatException ex) {\r\n                errorMessTextfield.setText(\"**Error: The fields selected should be Numeric.**\");\r\n                errorBorder(doseNumTextfield);\r\n\r\n            }\r\n        }\r\n        addToDB();\r\n    }\r\n\r\n\r\n    public void errorBorder(TextField textField){\r\n        textField.setStyle(\"-fx-border-color: red;\");\r\n    }\r\n    public void defaultBorder(TextField textfield){\r\n        textfield.setStyle(\"-fx-border-color: grey;\");\r\n    }\r\n\r\n    protected void navHomePage(){\r\n\r\n        FXMLLoader fxmlLoader = new FXMLLoader(PharmaTracApp.class.getResource(\"Homepage.fxml\"));\r\n        Stage stage = PharmaTracApp.getStage();\r\n        Scene scene = PharmaTracApp.getScene();\r\n        try {\r\n            scene.setRoot(fxmlLoader.load());\r\n            stage.setTitle(\"PharmaTrac\");\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    //data base interaction\r\n    public void addToDB() {\r\n\r\n        DeliveryRequisition deliveryRequisition = new DeliveryRequisition(\r\n                firstnameTextfield.getText(), lastnameTextfield.getText(),\r\n                locationTextfield.getText(),\r\n                medDescTextfield.getText(), doseTextfield.getText(),  Integer.valueOf(doseNumTextfield.getText()));\r\n\r\n        DocumentReference docRef = PharmaTracApp.fstore.collection(\"deliveryRequisition\").document(String.valueOf(deliveryRequisition.getOrderNumberDisplay()));\r\n\r\n        Map<String, Object> data = new HashMap<>();\r\n        data.put(\"patientFirstName\", deliveryRequisition.getPatientFirstName());\r\n        data.put(\"patientLastName\", deliveryRequisition.getPatientLastName());\r\n        data.put(\"patientLocation\", deliveryRequisition.getPatientLocation());\r\n        data.put(\"medication\", deliveryRequisition.getMedication());\r\n        data.put(\"numDoses\", deliveryRequisition.getNumDoses());\r\n        data.put(\"dose\", deliveryRequisition.getDose());\r\n        data.put(\"orderNumber\", deliveryRequisition.getOrderNumberDisplay());\r\n        data.put(\"notes\", addNotesTextfield.getText());\r\n        data.put(\"dateTime\", deliveryRequisition.getDateTime());\r\n        data.put(\"status\", \"p\");\r\n\r\n        ApiFuture<WriteResult> result = docRef.set(data);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/hospitaldeliveryinterface/CreateOrderController.java b/src/main/java/com/example/hospitaldeliveryinterface/CreateOrderController.java
--- a/src/main/java/com/example/hospitaldeliveryinterface/CreateOrderController.java	(revision ec3e54243defcd55308de42ccac2a97fed32f1f6)
+++ b/src/main/java/com/example/hospitaldeliveryinterface/CreateOrderController.java	(date 1710361030112)
@@ -109,7 +109,7 @@
                 errorBorder(child);
                 checkErrors = true;
             }
-        };
+        }
 
         if(checkErrors){
             errorMessTextfield.setText("**Error: Please fill out all required fields.**");
