Index: src/main/java/com/example/hospitaldeliveryinterface/controllers/HomepageController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.hospitaldeliveryinterface.controllers;\r\n\r\nimport com.example.hospitaldeliveryinterface.firebase.DataBaseMgmt;\r\nimport com.example.hospitaldeliveryinterface.firebase.FirebaseListener;\r\nimport com.example.hospitaldeliveryinterface.model.DeliveryRequisition;\r\nimport com.example.hospitaldeliveryinterface.model.NotifyMessg;\r\nimport javafx.animation.FadeTransition;\r\nimport javafx.application.Platform;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.layout.*;\r\nimport javafx.util.Duration;\r\n\r\nimport java.io.IOException;\r\nimport java.util.*;\r\n\r\npublic class HomepageController {\r\n    @FXML\r\n    private BorderPane LogInVbox;\r\n\r\n    @FXML\r\n    private Button LoginButton;\r\n\r\n    @FXML\r\n    private Button LoginButtonChange;\r\n\r\n    @FXML\r\n    private Button addNoteBtn;\r\n\r\n    @FXML\r\n    private TextArea addNoteText;\r\n\r\n    @FXML\r\n    private Button adminButton;\r\n\r\n    @FXML\r\n    private VBox adminNavBar;\r\n\r\n    @FXML\r\n    private VBox adminToolsNav;\r\n\r\n    @FXML\r\n    private ToolBar bottomToolBar;\r\n\r\n    @FXML\r\n    private Button completedButton;\r\n\r\n    @FXML\r\n    private Button createUserButton;\r\n\r\n\r\n    @FXML\r\n    private Button deliverReturnBtn;\r\n\r\n    @FXML\r\n    private Label deliveryFormLabel;\r\n\r\n    @FXML\r\n    private BorderPane deliveryFormPane;\r\n\r\n    @FXML\r\n    private TextField doseAmountText;\r\n\r\n    @FXML\r\n    private TextField doseText;\r\n\r\n    @FXML\r\n    private Button editBtn;\r\n\r\n    @FXML\r\n    private Label errMessLabel;\r\n\r\n    @FXML\r\n    private MenuButton filterbtn;\r\n\r\n    @FXML\r\n    private TextField firstnameText;\r\n\r\n    @FXML\r\n    private TextField lastnameText;\r\n\r\n    @FXML\r\n    private TextField locationText;\r\n\r\n    @FXML\r\n    private BorderPane mainLayout;\r\n\r\n    @FXML\r\n    private TextField medicationText;\r\n\r\n    @FXML\r\n    private Button newDeliveryButton;\r\n\r\n    @FXML\r\n    private AnchorPane notifyBox;\r\n\r\n    @FXML\r\n    private Label notifyMess;\r\n\r\n    @FXML\r\n    private Label notifyDatetime;\r\n\r\n    @FXML\r\n    private VBox orderDisplayContainer;\r\n\r\n    @FXML\r\n    private Button pendingButton;\r\n\r\n    @FXML\r\n    private VBox settingNavbar;\r\n\r\n    @FXML\r\n    private Button settingsButton;\r\n\r\n    @FXML\r\n    private PasswordField textFieldPassword;\r\n\r\n    @FXML\r\n    private TextField textFieldUsername;\r\n\r\n    @FXML\r\n    private TextField textFieldUsername1;\r\n\r\n    @FXML\r\n    private Label us;\r\n\r\n    @FXML\r\n    private Label us1;\r\n\r\n    @FXML\r\n    private Label us11;\r\n\r\n    @FXML\r\n    private Label us111;\r\n\r\n    @FXML\r\n    private Label usernameLabel;\r\n\r\n    //variables created\r\n    private boolean isToggleSettings;\r\n\r\n    private boolean isToggleAdmin;\r\n    private boolean isNewDelivery;\r\n    private boolean isNewAddNote;\r\n    private boolean isEdit;\r\n    private boolean isDelivered;\r\n    private  boolean toggleCreateUser;\r\n\r\n    private boolean beginNotify;\r\n\r\n    private String currentPage;\r\n    private String selectedCardOrderNum;\r\n    private Node selectedCard;//for getting selectedOrder\r\n    TextField[] allInputs;\r\n    \r\n    public void initialize() throws IOException {\r\n\r\n        LogInVbox.setVisible(false);\r\n\r\n        beginNotify = false;\r\n        isToggleSettings = false;\r\n        isNewDelivery = false;\r\n        isNewAddNote = false;\r\n        isEdit = false;\r\n        selectedCard = null;\r\n        selectedCardOrderNum = null;\r\n        isDelivered = false;\r\n        toggleCreateUser = false;\r\n        int totalOrders = DataBaseMgmt.getTotalNumOrders();\r\n        DeliveryRequisition.setOrderNumCount(totalOrders);\r\n\r\n        currentPage = \"Pending\";\r\n\r\n        toggleNewDelivery();\r\n        toggleAddNote();\r\n\r\n        settingNavbar.setVisible(false);\r\n        adminToolsNav.setVisible(false);\r\n        notifyBox.setVisible(false);\r\n        adminNavBar.setPrefWidth(0);\r\n        adminNavBar.setVisible(false);\r\n        notifyMess.setVisible(false);\r\n        notifyBox.setVisible(false);\r\n        notifyDatetime.setVisible(false);\r\n        selectOrder();\r\n\r\n       //Stuff to handle new Delivery\r\n        errMessLabel.setText(\"\");\r\n        allInputs = new TextField[]{\r\n                firstnameText,\r\n                lastnameText,\r\n                medicationText,\r\n                locationText,\r\n                doseAmountText,\r\n                doseText,\r\n        };\r\n\r\n        FirebaseListener.setController(this);\r\n        FirebaseListener.listenToPendingDeliveries();\r\n        FirebaseListener.listenToCompletedDeliveries();\r\n        FirebaseListener.listenToNotifyHistory();\r\n\r\n\r\n        firstnameText.textProperty().addListener((observableValue, s, t1) -> {\r\n            if(!t1.isEmpty()){\r\n                defaultBorder(firstnameText);\r\n            }\r\n        });\r\n        lastnameText.textProperty().addListener((observableValue, s, t1) -> {\r\n            if(!t1.isEmpty()){\r\n                defaultBorder(lastnameText);\r\n            }\r\n        });\r\n        medicationText.textProperty().addListener((observableValue, s, t1) -> {\r\n            if(!t1.isEmpty()){\r\n                defaultBorder(medicationText);\r\n            }\r\n        });\r\n        locationText.textProperty().addListener((observableValue, s, t1) -> {\r\n            if(!t1.isEmpty()){\r\n                defaultBorder(locationText);\r\n            }\r\n        });\r\n        doseAmountText.textProperty().addListener((observableValue, s, t1) -> {\r\n            if(!t1.isEmpty()){\r\n                defaultBorder(doseAmountText);\r\n            }\r\n        });\r\n        doseText.textProperty().addListener((observableValue, s, t1) -> {\r\n            if(!t1.isEmpty()){\r\n                defaultBorder(doseText);\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n\r\n    @FXML\r\n    void onAddNote(ActionEvent event) {\r\n\r\n        isNewAddNote = !isNewAddNote;\r\n        toggleAddNote();\r\n\r\n    }\r\n\r\n    public void toggleAddNote(){\r\n        if(isNewAddNote){\r\n            addNoteBtn.setText(\"Close Note\");\r\n            addNoteText.setVisible(true);\r\n        }else{\r\n            addNoteBtn.setText(\"Add Note\");\r\n            addNoteText.setVisible(false);\r\n        }\r\n    }\r\n\r\n\r\n    @FXML\r\n    void onClearText(ActionEvent event) {\r\n        clearText();\r\n    }\r\n    @FXML\r\n    void onSubmitOrder(ActionEvent event) {\r\n        boolean checkErrors = false;\r\n        for (TextField child: allInputs){\r\n            if(child.getText().isEmpty()){\r\n                errorBorder(child);\r\n                checkErrors = true;\r\n            }\r\n        };\r\n\r\n        if(checkErrors){\r\n            errMessLabel.setText(\"**Error: Please fill out all required fields.**\");\r\n        }else{\r\n            boolean checkOnlyNum = doseAmountText.getText().matches(\"[0-9]+\");\r\n\r\n            if(checkOnlyNum){\r\n                String fullName = firstnameText.getText() + \" \" + lastnameText.getText();\r\n                String newOrderNum = DeliveryRequisition.generateOrderNum();\r\n                DeliveryRequisition newOrder = new DeliveryRequisition(\r\n                        newOrderNum,\r\n                        DeliveryRequisition.currentDateTime(),\r\n                        fullName,\r\n                        locationText.getText(),\r\n                        medicationText.getText(),\r\n                        doseText.getText(),\r\n                        doseAmountText.getText(),\r\n                        addNoteText.getText(),\r\n                        \"\",\r\n                        \"\",\r\n                        \"\"\r\n                );\r\n\r\n                if(isEdit && selectedCardOrderNum != null){\r\n                    NotifyMessg.createMessg(\"edited\", \"[Employee ID]\", selectedCardOrderNum);\r\n\r\n                    if(currentPage.equals(\"Pending\")) {\r\n                        DataBaseMgmt.editOrder(\"pendingDeliveries\", selectedCardOrderNum, newOrder);\r\n                        FirebaseListener.listenToPendingDeliveries();\r\n\r\n                    }\r\n                    if(currentPage.equals(\"Completed\")) {\r\n                        DataBaseMgmt.editOrder(\"completedDeliveries\", selectedCardOrderNum, newOrder);\r\n                        FirebaseListener.listenToCompletedDeliveries();\r\n                    }\r\n\r\n                    isEdit = false;\r\n                    toggleNewDelivery();\r\n                    deselectOrder();\r\n                }\r\n                else {\r\n                    NotifyMessg.createMessg(\"newDelivery\", \"[Employee ID]\", newOrderNum);\r\n                    DataBaseMgmt.addToDB(newOrder, \"pendingDeliveries\");\r\n\r\n                }\r\n                clearText();\r\n            }else{\r\n                errMessLabel.setText(\"**Error: Only numbers for this field.**\");\r\n                errorBorder(doseAmountText);\r\n            }\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    void onPendingClick(ActionEvent event) throws IOException {\r\n        System.out.println(\"Pending Button Clicked\");\r\n        if(!currentPage.equals(\"Pending\")){\r\n            currentPage = \"Pending\";\r\n            FirebaseListener.onDataDisplay(\"pendingDeliveries\");\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    void onCompleteClick(ActionEvent event) throws IOException {\r\n        System.out.println(\"Completed Button Clicked\");\r\n        if(!currentPage.equals(\"Completed\")){\r\n            currentPage = \"Completed\";\r\n            FirebaseListener.onDataDisplay(\"completedDeliveries\");\r\n            isEdit = false;\r\n            isNewDelivery = false;\r\n            toggleNewDelivery();\r\n        }\r\n\r\n    }\r\n\r\n    @FXML\r\n    void onSettingClick(ActionEvent event) {\r\n        if(!isToggleSettings){\r\n            buttonToggle(settingsButton);\r\n            settingNavbar.setVisible(true);\r\n        }else{\r\n            buttonNotToggle(settingsButton);\r\n            settingNavbar.setVisible(false);\r\n            LogInVbox.setVisible(false);    //Bug Fix: discards widgets within LoginVBOX if the Login button is clicked and settings is closed\r\n            adminToolsNav.setVisible(false);\r\n            isToggleAdmin = false;\r\n\r\n        }\r\n\r\n        isToggleSettings = !isToggleSettings;\r\n    }\r\n\r\n    @FXML\r\n    void onAdminClick(ActionEvent event) {\r\n        isToggleAdmin = !isToggleAdmin; // Toggle the state at the beginning\r\n\r\n        if (isToggleAdmin) {\r\n            adminToolsNav.setVisible(true);\r\n        } else {\r\n            adminToolsNav.setVisible(false);\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    protected void onNewDelivery(ActionEvent event){\r\n        isNewDelivery = !isNewDelivery;\r\n        isEdit = false;\r\n        isDelivered = false;\r\n        toggleNewDelivery();\r\n        selectOrder();\r\n\r\n    }\r\n    @FXML\r\n    void onDeliverReturn(ActionEvent event) {\r\n        if(selectedCard != null){\r\n            isDelivered = !isDelivered;\r\n            isEdit = false;\r\n            toggleNewDelivery();\r\n            sendOrderToCompleted(selectedCardOrderNum);\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    void onEditDelivery(ActionEvent event) {\r\n        if(selectedCard != null){\r\n            isEdit = !isEdit;\r\n            isNewDelivery = false;\r\n            isDelivered = false;\r\n            toggleNewDelivery();\r\n            openEditDelivery(selectedCard);\r\n        }\r\n\r\n    }\r\n\r\n    public void toggleNewDelivery( ){\r\n\r\n        if(isDelivered){\r\n            buttonToggle(deliverReturnBtn);\r\n        }\r\n\r\n        if(!isDelivered){\r\n            buttonNotToggle(deliverReturnBtn);\r\n        }\r\n\r\n        if(isEdit){\r\n\r\n            editBtn.setText(\"Close Edit Delivery\");\r\n            buttonToggle(editBtn);\r\n            buttonNotToggle(newDeliveryButton);\r\n        }\r\n\r\n        if(!isEdit || isDelivered){\r\n            editBtn.setText(\"Edit Delivery\");\r\n            buttonNotToggle(editBtn);\r\n        }\r\n\r\n        if(isNewDelivery){\r\n            selectedCard = null;\r\n            selectedCardOrderNum = null;\r\n            clearText();\r\n            deliveryFormLabel.setText(\"New Delivery Form\");\r\n            newDeliveryButton.setText(\"Close New Delivery\");\r\n            buttonToggle(newDeliveryButton);\r\n            buttonNotToggle(editBtn);\r\n        }\r\n\r\n        if(!isNewDelivery){\r\n            newDeliveryButton.setText(\"+ New Delivery\");\r\n            buttonNotToggle(newDeliveryButton);\r\n        }\r\n\r\n        if(isEdit || isNewDelivery){\r\n            deliveryFormPane.setPrefWidth(320);\r\n            deliveryFormPane.setVisible(true);\r\n        }\r\n\r\n        if((isEdit && !isNewDelivery) || (!isEdit && !isNewDelivery)){\r\n            deliveryFormPane.setPrefWidth(0);\r\n            deliveryFormPane.setVisible(false);\r\n        }\r\n    }\r\n\r\n    public void buttonToggle(Button button){\r\n        button.setStyle(\"-fx-border-color: white; -fx-background-color: #22aae1;\");\r\n    }\r\n\r\n    public void buttonNotToggle(Button button){\r\n        button.setStyle(\"-fx-border-color: transparent; -fx-background-color: #22aae1;\");\r\n    }\r\n\r\n\r\n\r\n    public void errorBorder(TextField textField){\r\n        textField.setStyle(\"-fx-border-color: red;\");\r\n    }\r\n    public void defaultBorder(TextField textfield){\r\n        textfield.setStyle(\"-fx-border-color: grey;\");\r\n    }\r\n\r\n    public void displayQueue(Queue<DeliveryRequisition> currentQueue, String collectionName){\r\n        Platform.runLater(() -> {\r\n\r\n            //System.out.println(\"TESTING DISPLAY QUEUE HAS BEEN CALLED IN HOMEPAGECONTROLLER\");\r\n            //System.out.println(\"CHECKING SIZE OF ORDERS QUEUE IN DISPLAY QUEUE: \" + currentQueue.size());\r\n\r\n            Queue<DeliveryRequisition> tempQueue = new LinkedList<>();\r\n\r\n            if(currentPage.equals(\"Completed\") && collectionName.equals(\"completedDeliveries\")){\r\n                orderDisplayContainer.getChildren().clear();\r\n                deliverReturnBtn.setText(\"Return to Pending\");\r\n                buttonToggle(completedButton);\r\n                buttonNotToggle(pendingButton);\r\n                tempQueue = currentQueue;\r\n            }\r\n\r\n            if(currentPage.equals(\"Pending\") && collectionName.equals(\"pendingDeliveries\")){\r\n                orderDisplayContainer.getChildren().clear();\r\n                deliverReturnBtn.setText(\"Deliver Package\");\r\n                buttonToggle(pendingButton);\r\n                buttonNotToggle(completedButton);\r\n                tempQueue = currentQueue;\r\n            }\r\n\r\n            if(tempQueue == null && tempQueue.isEmpty()){\r\n                orderDisplayContainer.getChildren().clear();\r\n                return;\r\n            }\r\n\r\n\r\n\r\n            for(DeliveryRequisition order: tempQueue){\r\n                   // System.out.println(\"CHECKING DISPLAY QUEUE ORDERS: \" + order.toString());\r\n                        try {\r\n                            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/com/example/hospitaldeliveryinterface/OrderCard.fxml\"));\r\n                            GridPane orderTemplate = loader.load();\r\n                            OrderCardUIController controller = loader.getController();\r\n                            controller.updateOrderLabels(order);\r\n                            orderDisplayContainer.getChildren().add(orderTemplate);\r\n\r\n                        } catch (IOException e) {\r\n                            System.out.println(\"Failed to find OrderCard.fxml\");\r\n                        }\r\n\r\n            }\r\n\r\n\r\n            selectOrder();\r\n        });\r\n    }\r\n\r\n    public void selectOrder(){\r\n            for(Node node: orderDisplayContainer.getChildren()){\r\n                node.setOnMouseClicked(mouseEvent -> {\r\n                    if(selectedCard != null &&  selectedCard != node){\r\n                        selectedCard.setStyle(\"-fx-border-color: #22aae1; -fx-border-width: 2; -fx-background-color: transparent\");\r\n                        selectedCard = null;\r\n                        isEdit = false;\r\n                        isDelivered = false;\r\n                        toggleNewDelivery();\r\n                    }\r\n\r\n                    if(selectedCard != node || selectedCard == null){\r\n                            if (node instanceof GridPane) {\r\n                                GridPane gridpane = (GridPane) node;\r\n                                gridpane.setStyle(\"-fx-border-color: #22aae1; -fx-border-width: 2; -fx-background-color: #ffbdbd\");\r\n                                for(Node childNode : gridpane.getChildren()){\r\n                                    if (childNode instanceof Label) {\r\n                                        Label label = (Label) childNode;\r\n                                        if (\"orderNumDisplay\".equals(label.getId())) {\r\n                                            String labelText  = label.getText().substring(1); // Remove the \"#\" symbol\r\n                                            selectedCardOrderNum = labelText;\r\n                                            //System.out.println(\"ORDER NUMBER RETRIEVED: \" + labelText);\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        selectedCard = node;\r\n\r\n                    }else{\r\n                        selectedCard.setStyle(\"-fx-border-color: #22aae1; -fx-border-width: 2; -fx-background-color: transparent\");\r\n\r\n                        selectedCard = null;\r\n                        isEdit = false;\r\n                        isDelivered = false;\r\n                        toggleNewDelivery();\r\n                    }\r\n                });\r\n            }\r\n\r\n            if(!isEdit){\r\n                for(Node node: orderDisplayContainer.getChildren()){\r\n                    node.setStyle(\"-fx-border-color: #22aae1; -fx-border-width: 2; -fx-background-color: transparent\");\r\n                }\r\n            }\r\n    }\r\n\r\n    public void deselectOrder(){\r\n        if(selectedCard != null) {\r\n            selectedCard.setStyle(\"-fx-border-color: #22aae1; -fx-border-width: 2; -fx-background-color: transparent\");\r\n            selectedCard = null;\r\n        }\r\n    }\r\n\r\n    public void openEditDelivery(Node selectCard){\r\n        System.out.println(\"Edit Delivery is Open\");\r\n        deliveryFormPane.setPrefWidth(320);\r\n        deliveryFormPane.setVisible(true);\r\n        deliveryFormLabel.setText(\"Edit Delivery Form\");\r\n        clearText();\r\n\r\n        if(selectCard instanceof GridPane){\r\n            GridPane gridpane = (GridPane) selectCard;\r\n            for(Node selectChild: gridpane.getChildren()){\r\n                if(selectChild instanceof Label){\r\n                    setTextFieldFromLabel((Label)selectChild);\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    public void setTextFieldFromLabel(Label label){\r\n        if(label.getId() != null){\r\n            switch (label.getId()){\r\n                case \"patientNameDisplay\":\r\n                    String[] fullName = label.getText().split(\" \");\r\n                    firstnameText.setText(fullName[0]);\r\n                    lastnameText.setText(fullName[1]);\r\n                    break;\r\n                case \"locationDisplay\":\r\n                    locationText.setText(label.getText());\r\n                    break;\r\n\r\n                case \"medicationDisplay\":\r\n                    medicationText.setText(label.getText());\r\n                    break;\r\n\r\n                case \"doseDisplay\":\r\n                    doseText.setText(label.getText());\r\n                    break;\r\n\r\n                case \"doseQuantityDisplay\":\r\n                    doseAmountText.setText(label.getText());\r\n                    break;\r\n\r\n                default:\r\n                    System.out.println(\"NO ID EXIST ON ORDERCARD\");\r\n            }\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    public void clearText(){\r\n        for(TextField child: allInputs){\r\n            child.setText(\"\");\r\n        }\r\n        addNoteText.setText(\"\");\r\n        errMessLabel.setText(\"\");\r\n    }\r\n\r\n\r\n    public void sendOrderToCompleted(String selectedorderNum){\r\n        System.out.print(\"sendOrderToComplete method called!!!\");\r\n        System.out.println(\"selectOrderNum: \" + selectedorderNum);\r\n        if(selectedorderNum != null){\r\n            if(currentPage.equals(\"Pending\")) {\r\n                DataBaseMgmt.swapDB(selectedCardOrderNum, \"pendingDeliveries\",\"completedDeliveries\");\r\n                NotifyMessg.createMessg(\"delivered\", \"[Employee ID]\", selectedCardOrderNum);\r\n                FirebaseListener.onDataDisplay(\"pendingDeliveries\");\r\n            }\r\n\r\n            if(currentPage.equals(\"Completed\")) {\r\n                DataBaseMgmt.swapDB(selectedCardOrderNum, \"completedDeliveries\",\"pendingDeliveries\");\r\n                NotifyMessg.createMessg(\"returnToPending\", \"[Employee ID]\", selectedCardOrderNum);\r\n               FirebaseListener.onDataDisplay(\"completedDeliveries\");\r\n            }\r\n            isDelivered = false;\r\n            toggleNewDelivery();\r\n            //deselectOrder();\r\n            selectedCard = null;\r\n            selectedCardOrderNum = null;\r\n        }\r\n    }\r\n\r\n    public static boolean textFieldCheck(String username,String password) {\r\n        boolean checker = false;\r\n        if (username.length() == 0 || password.length() == 0) {\r\n            checker = true;\r\n        }\r\n        if (!(username.matches(\"S\\\\d{8}\") && password.matches(\"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)(?=.*[@$!%*?&])[A-Za-z\\\\d@$!%*?&]{8,}$\"))) {\r\n\r\n            checker = true;\r\n        }\r\n        return checker;\r\n\r\n    }\r\n    public void showDialog () {\r\n        Alert alert = new Alert(Alert.AlertType.WARNING);\r\n        alert.setHeaderText(\"Invalid input\");\r\n        alert.setTitle(\"Warning\");\r\n        alert.setContentText(\"Username or password is incorrect\");\r\n        Optional<ButtonType> result = alert.showAndWait();\r\n    }\r\n\r\n\r\n    public void showDialogCorrect () {\r\n        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);\r\n        alert.setHeaderText(\"Correct Input\");\r\n        alert.setTitle(\"Logged in\");\r\n        alert.setContentText(\"You are signed in\");\r\n        Optional<ButtonType> result = alert.showAndWait();\r\n    }\r\n    public void showDialogSignOut() {\r\n        Alert alert = new Alert(Alert.AlertType.INFORMATION);\r\n        alert.setHeaderText(\"Logged out\");\r\n        alert.setTitle(\"Signed out\");\r\n        alert.setContentText(\"You are signing out\");\r\n        Optional<ButtonType> result = alert.showAndWait();\r\n    }\r\n\r\n    @FXML\r\n    void handleLoginButtonChange() {\r\n        if (LoginButtonChange.getText().equals(\"Login\")) {\r\n            LogInVbox.setVisible(true);\r\n        }\r\n        else if (LoginButtonChange.getText().equals(\"Sign out\")) {\r\n            showDialogSignOut();\r\n            LoginButtonChange.setText(\"Login\");\r\n            LogInVbox.setVisible(true);\r\n\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    void adminCreateUserChange(ActionEvent event){\r\n\r\n        if(!toggleCreateUser){\r\n            adminNavBar.setVisible(true);\r\n            adminNavBar.setPrefWidth(314);\r\n        }else {\r\n            adminNavBar.setPrefWidth(0);\r\n            adminNavBar.setVisible(false);\r\n        }\r\n        toggleCreateUser = !toggleCreateUser;\r\n    }\r\n    @FXML\r\n    void handleLoginButton() {\r\n\r\n            if (textFieldCheck(textFieldUsername.getText(), textFieldPassword.getText()) == false) {\r\n                showDialogCorrect();\r\n                LogInVbox.setVisible(false);\r\n                usernameLabel.setText(String.valueOf(textFieldUsername.getText()));\r\n\r\n                LoginButtonChange.setText(\"Sign out\");\r\n            } else{\r\n                showDialog();\r\n            }\r\n            textFieldUsername.clear();\r\n            textFieldPassword.clear();\r\n\r\n    }\r\n\r\n    @FXML\r\n    void onReturnToHome(ActionEvent event) {\r\n        LogInVbox.setVisible(false);\r\n    }\r\n\r\n    @FXML\r\n    void onCreateUser(ActionEvent event) {\r\n\r\n    }\r\n\r\n    @FXML\r\n    void onCloseUserCreate(ActionEvent event) {\r\n        adminNavBar.setPrefWidth(0);\r\n        toggleCreateUser = false;\r\n        adminNavBar.setVisible(false);\r\n    }\r\n\r\n\r\n    public void displayNotfications(){\r\n\r\n        if(!beginNotify){\r\n\r\n            beginNotify = true;\r\n\r\n            notifyMess.setText(\"\");\r\n            notifyDatetime.setText(\"\");\r\n\r\n\r\n            notifyBox.setVisible(true);\r\n            notifyMess.setVisible(true);\r\n            notifyDatetime.setVisible(true);\r\n\r\n\r\n\r\n            new Thread(()->{//allows to run independently from the main applicaiton flow\r\n\r\n                Queue<NotifyMessg> retrieveMessgQueue = NotifyMessg.getMessgQueue();\r\n\r\n                while(!retrieveMessgQueue.isEmpty()){\r\n                    try {\r\n                        NotifyMessg selectedNotify = NotifyMessg.removeMessg();\r\n\r\n                        if(selectedNotify == null){break;}\r\n\r\n                       Platform.runLater(()->{\r\n                           FadeTransition fade1 = new FadeTransition(Duration.millis(3000), notifyBox);\r\n                           FadeTransition fade2 = new FadeTransition(Duration.millis(3000), notifyBox);\r\n                           FadeTransition fade3 = new FadeTransition(Duration.millis(3000), notifyBox);\r\n\r\n                           fade1.setFromValue(1.0);\r\n                           fade1.setToValue(0.0);\r\n                           fade2.setFromValue(1.0);\r\n                           fade2.setToValue(0.0);\r\n                           fade3.setFromValue(1.0);\r\n                           fade3.setToValue(0.0);\r\n                           /**\r\n                           // Set actions when transitions finish\r\n                           fade1.setOnFinished(event -> notifyBox.setVisible(false));\r\n                           fade2.setOnFinished(event -> notifyMess.setVisible(false));\r\n                           fade3.setOnFinished(event -> notifyDatetime.setVisible(false));\r\n                            */\r\n                           // Play all fade transitions\r\n                           fade1.play();\r\n                           fade2.play();\r\n                           fade3.play();\r\n\r\n                           notifyMess.setText(selectedNotify.getMessage());\r\n                           notifyDatetime.setText(selectedNotify.getMssgDate()+\" - \"+selectedNotify.getMssgTime());\r\n                       });\r\n                        retrieveMessgQueue = NotifyMessg.getMessgQueue();\r\n                        Thread.sleep(3000);\r\n                    } catch (InterruptedException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n\r\n                }\r\n                beginNotify = false;\r\n                notifyBox.setVisible(false);\r\n                notifyMess.setVisible(false);\r\n                notifyDatetime.setVisible(false);\r\n            }).start();\r\n\r\n\r\n        }\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/hospitaldeliveryinterface/controllers/HomepageController.java b/src/main/java/com/example/hospitaldeliveryinterface/controllers/HomepageController.java
--- a/src/main/java/com/example/hospitaldeliveryinterface/controllers/HomepageController.java	
+++ b/src/main/java/com/example/hospitaldeliveryinterface/controllers/HomepageController.java	
@@ -768,8 +768,6 @@
             notifyMess.setVisible(true);
             notifyDatetime.setVisible(true);
 
-
-
             new Thread(()->{//allows to run independently from the main applicaiton flow
 
                 Queue<NotifyMessg> retrieveMessgQueue = NotifyMessg.getMessgQueue();
