Index: src/main/java/com/example/hospitaldeliveryinterface/controllers/HomepageController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.hospitaldeliveryinterface.controllers;\r\n\r\nimport com.example.hospitaldeliveryinterface.PharmaTracApp;\r\nimport com.example.hospitaldeliveryinterface.firebase.DataBaseMgmt;\r\nimport com.example.hospitaldeliveryinterface.firebase.FirebaseListener;\r\nimport com.example.hospitaldeliveryinterface.model.*;\r\nimport javafx.application.Platform;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.scene.input.MouseEvent;\r\nimport javafx.scene.layout.*;\r\n\r\nimport java.io.IOException;\r\nimport java.util.*;\r\n\r\nimport static com.example.hospitaldeliveryinterface.Algolia.AlgoliaMgmt.searchAlgolia;\r\n\r\n\r\npublic class HomepageController {\r\n    @FXML\r\n    private HBox searchHBox;\r\n    @FXML\r\n    private HBox mainContainer;\r\n    @FXML\r\n    private Button changeLanguageBtn;\r\n\r\n    @FXML\r\n    private TextField searchBarTextField;\r\n\r\n    @FXML\r\n    private Button LoginButtonChange;\r\n\r\n    @FXML\r\n    private Button adminButton;\r\n\r\n    @FXML\r\n    private VBox adminToolsNav;\r\n\r\n    @FXML\r\n    private ToolBar bottomToolBar;\r\n\r\n\r\n    @FXML\r\n    private Button completedButton;\r\n\r\n    @FXML\r\n    private Button createUserBtn;\r\n\r\n    @FXML\r\n    private Button darkLightBtn;\r\n\r\n    @FXML\r\n    private Button deleteOrdersBtn;\r\n\r\n    @FXML\r\n    private Button deliverReturnBtn;\r\n\r\n    @FXML\r\n    private Button editBtn;\r\n\r\n    @FXML\r\n    private HBox editDeliverButtonsHbox;\r\n\r\n    @FXML\r\n    private ImageView lightDarkIcon;\r\n\r\n\r\n    @FXML\r\n    private BorderPane mainLayout;\r\n\r\n    @FXML\r\n    private ScrollPane mainOrderScroll;\r\n\r\n    @FXML\r\n    private Button newDeliveryButton;\r\n\r\n    @FXML\r\n    private VBox orderDisplayContainer;\r\n\r\n    @FXML\r\n    private Button pendingButton;\r\n\r\n    @FXML\r\n    private Button reportsButton;\r\n\r\n    @FXML\r\n    private AnchorPane rootPane;\r\n\r\n\r\n\r\n    @FXML\r\n    private Button searchButton;\r\n\r\n    @FXML\r\n    private VBox settingNavbar;\r\n\r\n    @FXML\r\n    private Button settingsButton;\r\n\r\n    @FXML\r\n    private Button signOutBtn;\r\n\r\n    @FXML\r\n    private VBox signOutVbox;\r\n\r\n\r\n    //variables created\r\n    private boolean isLoginToggle;\r\n    private boolean isToggleSettings;\r\n    private boolean isToggleAdmin;\r\n    private Node selectedCard;\r\n    private String[] LangToggleBtn;\r\n\r\n    private boolean isLightMode;\r\n\r\n    /***Menus and controllers for different components of application********/\r\n    private AnchorPane languageMenuUI;\r\n    private LanguageMenuController languageMenuController;\r\n    private BorderPane deliveryFormUI;\r\n    private DeliveryFormController deliveryFormController;\r\n    private BorderPane createUserFormUI;\r\n    private CreateUserController createUserController;\r\n    private AnchorPane notifyMessageUI;\r\n    private NotifyMessageController notifyMessageController;\r\n    private BorderPane loginFormUI;\r\n    private LoginFormController loginFormController;\r\n\r\n    /****************************************************************************/\r\n\r\n    private Button[] buttonsForAdjustWidth;\r\n\r\n    private Image lightModeIcon;\r\n    private Image darkModeIcon;\r\n\r\n    String tempDarkMode;\r\n    String tempLightMode;\r\n    public void initialize(){\r\n\r\n        tempLightMode = \"Light Mode\";\r\n        tempDarkMode = \"Dark Mode\";\r\n\r\n\r\n        buttonsForAdjustWidth = new Button[]{\r\n                pendingButton,\r\n                completedButton,\r\n                reportsButton,\r\n                editBtn,\r\n                deliverReturnBtn,\r\n                newDeliveryButton,\r\n                settingsButton,\r\n                LoginButtonChange,\r\n                adminButton\r\n        };\r\n        setUpAdjustWidth();\r\n\r\n        onSetDisabled(true);\r\n\r\n\r\n\r\n        searchBarTextField.textProperty().addListener((observable, oldValue, newValue) -> {\r\n            if(searchBarTextField.getText().isEmpty()){\r\n                orderDisplayContainer.getChildren().clear();\r\n            }\r\n            else {\r\n                onSearchClick();\r\n            }\r\n        });\r\n\r\n\r\n\r\n        setUpDeliveryForm();\r\n        setUpCreateUserForm();\r\n        setUpNotifyMessage();\r\n        setUpLoginForm();\r\n\r\n\r\n\r\n        LangToggleBtn = MitchTextTranslate.defaultEnglishText();\r\n\r\n        MitchTextTranslate.initialLanguages();\r\n        setUpLanguageMenu();\r\n\r\n        ToggleTracking.setCurrentTab(\"Pending\");\r\n        ToggleTracking.setSelectedCardOrderNum(null);\r\n        ToggleTracking.setIsEdit(false);\r\n        ToggleTracking.setIsNewDelivery(false);\r\n        ToggleTracking.setisCreateUser(false);\r\n\r\n        selectedCard = null;\r\n\r\n        isToggleSettings = false;\r\n        isLoginToggle = false;\r\n        int totalOrders = DataBaseMgmt.getTotalNumOrders();\r\n        DeliveryRequisition.setOrderNumCount(totalOrders);\r\n\r\n        //toggleNewDelivery();\r\n\r\n        settingNavbar.setVisible(false);\r\n        adminToolsNav.setVisible(false);\r\n        signOutVbox.setVisible(false);\r\n\r\n        searchHBox.setPrefHeight(0.0);\r\n        searchBarTextField.setVisible(false);\r\n\r\n        selectOrder();\r\n\r\n\r\n        FirebaseListener.setController(this);\r\n        FirebaseListener.listenToPendingDeliveries();\r\n        FirebaseListener.listenToCompletedDeliveries();\r\n        FirebaseListener.listenToNotifyHistory();\r\n\r\n        isLightMode = true;\r\n        rootPane.getStylesheets().clear();\r\n\r\n        lightModeIcon = new Image(String.valueOf(getClass().getResource(\"/com/example/hospitaldeliveryinterface/lightModeIcon.png\")));\r\n        darkModeIcon = new Image(String.valueOf(getClass().getResource(\"/com/example/hospitaldeliveryinterface/darkModeIcon.png\")));\r\n\r\n\r\n    }\r\n    /****************initial SETUP BEGINS HERE**************************/\r\n\r\n    public void setUpAdjustWidth(){\r\n      for(Button childBtn: buttonsForAdjustWidth){\r\n          childBtn.textProperty().addListener(((observableValue, s, t1) -> {\r\n              childBtn.setPrefWidth(Button.USE_COMPUTED_SIZE);\r\n          }));\r\n      }\r\n    }\r\n\r\n    public void onSetVisibleAdmin(){\r\n        adminButton.setVisible(true);\r\n    }\r\n\r\n    public void onSetDisabled(boolean temp){\r\n        editBtn.setDisable(temp);\r\n        newDeliveryButton.setDisable(temp);\r\n        deliverReturnBtn.setDisable(temp);\r\n\r\n    }\r\n    public void setUpLoginForm(){\r\n        try {\r\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/com/example/hospitaldeliveryinterface/LoginForm.fxml\"));\r\n            loginFormUI = loader.load();\r\n            loginFormController = loader.getController();\r\n\r\n            loginFormController.setHomepageController(this);\r\n\r\n            rootPane.getChildren().add(loginFormUI);\r\n\r\n            AnchorPane.setBottomAnchor(loginFormUI,0.0);\r\n            AnchorPane.setLeftAnchor(loginFormUI,0.0);\r\n            AnchorPane.setTopAnchor(loginFormUI, 0.0);\r\n            AnchorPane.setRightAnchor(loginFormUI,0.0);\r\n\r\n            loginFormUI.setVisible(false);\r\n\r\n        } catch (IOException e) {\r\n            System.out.println(\"Failed to find LoginForm.fxml\");\r\n        }\r\n    }\r\n    public void setUpNotifyMessage(){\r\n        try {\r\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/com/example/hospitaldeliveryinterface/NotifyMessage.fxml\"));\r\n            notifyMessageUI = loader.load();\r\n            notifyMessageController = loader.getController();\r\n\r\n            rootPane.getChildren().add(notifyMessageUI);\r\n\r\n            AnchorPane.setBottomAnchor(notifyMessageUI,70.0);\r\n            AnchorPane.setLeftAnchor(notifyMessageUI,10.0);\r\n            notifyMessageUI.setVisible(false);\r\n\r\n        } catch (IOException e) {\r\n            System.out.println(\"Failed to find NotifyMessage.fxml\");\r\n        }\r\n    }\r\n\r\n    public  void setUpDeliveryForm(){\r\n        try {\r\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/com/example/hospitaldeliveryinterface/DeliveryForm.fxml\"));\r\n            deliveryFormUI = loader.load();\r\n            deliveryFormController = loader.getController();\r\n            mainContainer.getChildren().add(deliveryFormUI);\r\n\r\n            deliveryFormUI.setPrefWidth(0);\r\n            deliveryFormUI.setVisible(false);\r\n\r\n        } catch (IOException e) {\r\n            System.out.println(\"Failed to find OrderCard.fxml\");\r\n        }\r\n    }\r\n\r\n    public  void setUpCreateUserForm(){\r\n        try {\r\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/com/example/hospitaldeliveryinterface/CreateUser.fxml\"));\r\n            createUserFormUI = loader.load();\r\n            createUserController = loader.getController();\r\n            mainContainer.getChildren().add(createUserFormUI);\r\n\r\n            createUserFormUI.setPrefWidth(0);\r\n            createUserFormUI.setVisible(false);\r\n\r\n        } catch (IOException e) {\r\n            System.out.println(\"Failed to find CreateUserForm.fxml\");\r\n        }\r\n    }\r\n\r\n    public void setUpLanguageMenu(){\r\n\r\n        changeLanguageBtn.setText(\"Language: English\");\r\n\r\n        try {\r\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/com/example/hospitaldeliveryinterface/LanguageMenu.fxml\"));\r\n            languageMenuUI = loader.load();\r\n            languageMenuController = loader.getController();\r\n\r\n            languageMenuController.setButton(changeLanguageBtn);\r\n            languageMenuController.setHomeController(this);\r\n\r\n            rootPane.getChildren().add(languageMenuUI);\r\n\r\n            AnchorPane.setTopAnchor(languageMenuUI, 127.0);\r\n            AnchorPane.setRightAnchor(languageMenuUI, 180.0);\r\n\r\n            languageMenuUI.setVisible(false);\r\n\r\n        } catch (IOException e) {\r\n            System.out.println(\"Failed to find LanguageMenu.fxml\");\r\n        }\r\n\r\n    }\r\n\r\n    /****************initial SETUP ENDS HERE**************************/\r\n\r\n/**************************MITCHELL LANGUAGE STUFF*************************/\r\n\r\n    public void setUpLangText(String[] langTextChange){\r\n\r\n        newDeliveryButton.setText(ToggleTracking.getIsNewDelivery()?langTextChange[8]:langTextChange[7]);\r\n        editBtn.setText(ToggleTracking.getIsEdit()?langTextChange[6]:langTextChange[5]);\r\n\r\n        //settingsButton.setText(langTextChange[2]);\r\n        completedButton.setText(langTextChange[0]);\r\n        pendingButton.setText(langTextChange[1]);\r\n        reportsButton.setText(langTextChange[23]);\r\n        createUserBtn.setText(langTextChange[13]);\r\n        deleteOrdersBtn.setText(langTextChange[12]);\r\n        adminButton.setText(langTextChange[9]);\r\n\r\n        if(Employee.getCurrentLogin() == null){\r\n            LoginButtonChange.setText(langTextChange[10]);\r\n        }\r\n\r\n        tempLightMode = langTextChange[41];\r\n        tempDarkMode = langTextChange[42];\r\n\r\n        if(isLightMode){\r\n            darkLightBtn.setText(langTextChange[41]);\r\n        }else{\r\n            darkLightBtn.setText(langTextChange[42]);\r\n        }\r\n        signOutBtn.setText(langTextChange[11]);\r\n\r\n        switch (ToggleTracking.getCurrentTab()){\r\n            case \"Pending\":\r\n                deliverReturnBtn.setText(langTextChange[3]);\r\n                break;\r\n            case \"Completed\":\r\n\r\n                deliverReturnBtn.setText(langTextChange[4]);\r\n                break;\r\n\r\n            default:\r\n                System.out.println(\"No Page/Tab exist on Application!\");\r\n        }\r\n\r\n        deliveryFormController.updateLanguageLabel(langTextChange);\r\n        loginFormController.updateLanguageLabel(langTextChange);\r\n        createUserController.updateLanguageLabel(langTextChange);\r\n\r\n    }\r\n\r\n    @FXML\r\n    void onChangeLanguageClick(ActionEvent event) {\r\n        toggleLanguageMenu();\r\n    }\r\n\r\n    public void toggleLanguageMenu(){\r\n        if (languageMenuUI != null) {\r\n            languageMenuUI.setVisible(!languageMenuUI.isVisible());\r\n        }\r\n\r\n        if(isToggleAdmin){\r\n            adminToolsNav.setVisible(false);\r\n            isToggleAdmin = false;\r\n        }\r\n    }\r\n    public void setLangToggleBtn(String[] newText) {\r\n       LangToggleBtn = newText;\r\n        setUpLangText(LangToggleBtn);\r\n\r\n    }\r\n    /********************************Language Menu ENDS****************************/\r\n    /*******************************handle dark/light mode changes*********************/\r\n    @FXML\r\n    void onDarkLightClick(ActionEvent event) {\r\n        handleDarkLightChanges();\r\n    }\r\n\r\n    public void handleDarkLightChanges(){\r\n\r\n        String currentStyleSheet = \"\";\r\n        if (isLightMode) {\r\n            darkLightBtn.setText(tempLightMode);\r\n            lightDarkIcon.setImage(lightModeIcon);\r\n            currentStyleSheet = \"darkMode.css\";\r\n\r\n        } else {\r\n            darkLightBtn.setText(tempDarkMode);\r\n            lightDarkIcon.setImage(darkModeIcon);\r\n            currentStyleSheet = \"lightMode.css\";\r\n        }\r\n\r\n        Scene currentScene = PharmaTracApp.getScene();\r\n        currentScene.getStylesheets().clear();\r\n        currentScene.getStylesheets().add(PharmaTracApp.class.getResource(currentStyleSheet).toExternalForm());\r\n        isLightMode = !isLightMode;\r\n\r\n    }\r\n\r\n    /*********************************************************************************/\r\n    @FXML\r\n    void onPendingClick(ActionEvent event) throws IOException {\r\n\r\n        if(ToggleTracking.getCurrentTab().equals(\"Reports\")){\r\n            toggleReports();\r\n        }\r\n        System.out.println(\"Pending Button Clicked\");\r\n        if(!ToggleTracking.getCurrentTab().equals(\"Pending\")){\r\n            ToggleTracking.setCurrentTab(\"Pending\");\r\n            deliverReturnBtn.setText(LangToggleBtn[3]);\r\n            FirebaseListener.navBarDataDisplay(\"Pending\");\r\n        }\r\n\r\n    }\r\n\r\n    @FXML\r\n    void onCompleteClick(ActionEvent event) throws IOException {\r\n        System.out.println(\"Completed Button Clicked\");\r\n\r\n        if(ToggleTracking.getCurrentTab().equals(\"Reports\")){\r\n            toggleReports();\r\n        }\r\n        if(!ToggleTracking.getCurrentTab().equals(\"Completed\")){\r\n            ToggleTracking.setCurrentTab(\"Completed\");\r\n            deliverReturnBtn.setText(LangToggleBtn[4]);\r\n            FirebaseListener.navBarDataDisplay(\"Completed\");\r\n            ToggleTracking.setIsEdit(false);\r\n            ToggleTracking.setIsNewDelivery(false);\r\n            toggleNewDelivery();\r\n        }\r\n\r\n    }\r\n    @FXML\r\n    void onReportsClick(ActionEvent event) throws IOException {\r\n        System.out.println(\"Reports Button Clicked\");\r\n        if(!ToggleTracking.getCurrentTab().equals(\"Reports\")) {\r\n            ToggleTracking.setCurrentTab(\"Reports\");\r\n            orderDisplayContainer.getChildren().clear();\r\n            deliverReturnBtn.setText(\"Deliver Package\");\r\n            buttonToggle(reportsButton);\r\n            buttonNotToggle(pendingButton);\r\n            buttonNotToggle(completedButton);\r\n            toggleReports();\r\n            toggleNewDelivery();\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    void onCompleteDeliverPress(MouseEvent event) {\r\n        buttonToggle(deliverReturnBtn);\r\n    }\r\n\r\n    @FXML\r\n    void onCompleteDeliverRelease(MouseEvent event) {\r\n        buttonNotToggle(deliverReturnBtn);\r\n    }\r\n\r\n    @FXML\r\n    void handleLoginButtonChange() {\r\n\r\n        if(Employee.getCurrentLogin() != null){\r\n            signOutVbox.setVisible(!signOutVbox.isVisible());\r\n        }else{\r\n            loginFormController.setLoginVBoxVisibility(true);\r\n        }\r\n\r\n        languageMenuUI.setVisible(false);\r\n        adminToolsNav.setVisible(false);\r\n        settingNavbar.setVisible(false);\r\n        buttonNotToggle(settingsButton);\r\n        isToggleSettings = false;\r\n        isToggleAdmin = false;\r\n\r\n    }\r\n    @FXML\r\n    void onSettingClick(ActionEvent event) {\r\n        if(!isToggleSettings){\r\n            buttonToggle(settingsButton);\r\n            settingNavbar.setVisible(true);\r\n\r\n        }else{\r\n            buttonNotToggle(settingsButton);\r\n            settingNavbar.setVisible(false);\r\n            loginFormController.setLoginVBoxVisibility(false);//Bug Fix: discards widgets within LoginVBOX if the Login button is clicked and settings is closed\r\n        }\r\n        adminToolsNav.setVisible(false);\r\n        isToggleAdmin = false;\r\n        languageMenuUI.setVisible(false);\r\n        signOutVbox.setVisible(false);\r\n\r\n        isToggleSettings = !isToggleSettings;\r\n    }\r\n\r\n    @FXML\r\n    void onAdminClick(ActionEvent event) {\r\n        isToggleAdmin = !isToggleAdmin; // Toggle the state at the beginning\r\n\r\n        if (isToggleAdmin) {\r\n            adminToolsNav.setVisible(true);\r\n        } else {\r\n            adminToolsNav.setVisible(false);\r\n        }\r\n\r\n        languageMenuUI.setVisible(false);\r\n        settingNavbar.setVisible(false);\r\n        signOutVbox.setVisible(false);\r\n\r\n        buttonNotToggle(settingsButton);\r\n        isToggleSettings = false;\r\n\r\n    }\r\n\r\n\r\n\r\n    @FXML\r\n    protected void onNewDelivery(ActionEvent event){\r\n        ToggleTracking.setIsNewDelivery(!ToggleTracking.getIsNewDelivery());\r\n        ToggleTracking.setIsEdit(false);\r\n        toggleNewDelivery();\r\n        selectOrder();\r\n        deliveryFormController.openNewDlivery();\r\n    }\r\n    @FXML\r\n    void onDeliverReturn(ActionEvent event) {\r\n        if(ToggleTracking.getSelectedCardOrderNum() != null){\r\n            ToggleTracking.setIsEdit(false);\r\n            toggleNewDelivery();\r\n            sendOrderToCompleted(ToggleTracking.getSelectedCardOrderNum());\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    void onEditDelivery(ActionEvent event) {\r\n        System.out.println(\"OnEditDeliveyr checkv.1: \" + ToggleTracking.getSelectedCardOrderNum());\r\n\r\n        if(selectedCard != null && ToggleTracking.getIsEdit() && ToggleTracking.getSelectedCardOrderNum() != null){\r\n            selectedCard.setStyle(\"-fx-border-color: #22aae1; -fx-border-width: 2; -fx-background-color: transparent\");\r\n            selectedCard = null;\r\n            ToggleTracking.setSelectedCardOrderNum(null);\r\n            ToggleTracking.setIsEdit(false);\r\n            toggleNewDelivery();\r\n        }\r\n\r\n        if(ToggleTracking.getSelectedCardOrderNum() != null){\r\n            ToggleTracking.setIsEdit(!ToggleTracking.getIsEdit());\r\n            ToggleTracking.setIsNewDelivery(false);\r\n            toggleNewDelivery();\r\n            System.out.println(\"OnEditDeliveyr check: \" + ToggleTracking.getSelectedCardOrderNum());\r\n           if(deliveryFormController != null){\r\n               deliveryFormController.openEditDelivery();\r\n           }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * turns off unneeded buttons and makes the search bar visible when you go to the reports tab\r\n     */\r\n\r\n    public void onNotifyMessage(){\r\n        notifyMessageController.displayNotfications();\r\n    }\r\n\r\n    public void setLoginButtonText(String currentStatus){\r\n        LoginButtonChange.setText(currentStatus);\r\n    }\r\n\r\n\r\n    public void toggleNewDelivery( ){\r\n\r\n        if(ToggleTracking.getIsEdit()){\r\n            editBtn.setText(LangToggleBtn[6]);\r\n            buttonToggle(editBtn);\r\n            buttonNotToggle(newDeliveryButton);\r\n        }\r\n\r\n        if(!ToggleTracking.getIsEdit()){\r\n            editBtn.setText(LangToggleBtn[5]);\r\n            buttonNotToggle(editBtn);\r\n        }\r\n\r\n        if(ToggleTracking.getIsNewDelivery()){\r\n            selectedCard = null;\r\n            ToggleTracking.setSelectedCardOrderNum(null);\r\n            newDeliveryButton.setText(LangToggleBtn[8]);\r\n            buttonToggle(newDeliveryButton);\r\n            buttonNotToggle(editBtn);\r\n        }\r\n\r\n        if(!ToggleTracking.getIsNewDelivery()){\r\n            newDeliveryButton.setText(LangToggleBtn[7]);\r\n            buttonNotToggle(newDeliveryButton);\r\n        }\r\n\r\n        if(ToggleTracking.getIsEdit() || ToggleTracking.getIsNewDelivery()){\r\n            deliveryFormUI.setPrefWidth(320);\r\n            deliveryFormUI.setVisible(true);\r\n        }\r\n\r\n        if((ToggleTracking.getIsEdit()  && !ToggleTracking.getIsNewDelivery()) || (!ToggleTracking.getIsEdit()  && !ToggleTracking.getIsNewDelivery())){\r\n            deliveryFormUI.setPrefWidth(0);\r\n            deliveryFormUI.setVisible(false);\r\n        }\r\n    }\r\n\r\n    public void buttonToggle(Button button){\r\n        button.getStyleClass().clear();\r\n        button.getStyleClass().add(\"isToggled\");\r\n    }\r\n\r\n    public void buttonNotToggle(Button button){\r\n        button.getStyleClass().clear();\r\n        button.getStyleClass().add(\"isNotToggled\");\r\n    }\r\n\r\n    public void displayQueue(Queue<DeliveryRequisition> currentQueue, String collectionName){\r\n        Platform.runLater(() -> {\r\n            //System.out.println(\"TESTING DISPLAY QUEUE HAS BEEN CALLED IN HOMEPAGECONTROLLER\");\r\n            //System.out.println(\"CHECKING SIZE OF ORDERS QUEUE IN DISPLAY QUEUE: \" + currentQueue.size());\r\n            Queue<DeliveryRequisition> tempQueue = new LinkedList<>();\r\n\r\n            if(ToggleTracking.getCurrentTab().equals(\"Completed\") && collectionName.equals(\"completedDeliveries\")){\r\n                 orderDisplayContainer.getChildren().clear();\r\n                buttonToggle(completedButton);\r\n                buttonNotToggle(pendingButton);\r\n                buttonNotToggle(reportsButton);\r\n                tempQueue = currentQueue;\r\n            }\r\n\r\n            if(ToggleTracking.getCurrentTab().equals(\"Pending\") && collectionName.equals(\"pendingDeliveries\")){\r\n                orderDisplayContainer.getChildren().clear();\r\n                buttonToggle(pendingButton);\r\n                buttonNotToggle(reportsButton);\r\n                buttonNotToggle(completedButton);\r\n                tempQueue = currentQueue;\r\n            }\r\n\r\n\r\n\r\n            if(tempQueue == null && tempQueue.isEmpty()){\r\n                orderDisplayContainer.getChildren().clear();\r\n                return;\r\n            }\r\n\r\n            for(DeliveryRequisition order: tempQueue){\r\n                   // System.out.println(\"CHECKING DISPLAY QUEUE ORDERS: \" + order.toString());\r\n                        try {\r\n                            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/com/example/hospitaldeliveryinterface/OrderCard.fxml\"));\r\n                            HBox orderTemplate = loader.load();\r\n                            OrderCardUIController controller = loader.getController();\r\n                            controller.updateOrderLabels(order);\r\n                            orderDisplayContainer.getChildren().add(orderTemplate);\r\n\r\n                        } catch (IOException e) {\r\n                            System.out.println(\"Failed to find OrderCard.fxml\");\r\n                        }\r\n            }\r\n\r\n\r\n            selectOrder();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Displays a queue of search results to the homepage\r\n     * @param searchQueue, queue of delivery requisitions that holds the search results\r\n     */\r\n    public void displaySearchResults(Queue<DeliveryRequisition> searchQueue) {\r\n\r\n        orderDisplayContainer.getChildren().clear();\r\n        if(searchQueue == null && searchQueue.isEmpty()){\r\n\r\n            return;\r\n        }\r\n\r\n        for(DeliveryRequisition order: searchQueue){\r\n            try {\r\n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/com/example/hospitaldeliveryinterface/OrderCard.fxml\"));\r\n                HBox orderTemplate = loader.load();\r\n                OrderCardUIController controller = loader.getController();\r\n                controller.updateOrderLabels(order);\r\n                orderDisplayContainer.getChildren().add(orderTemplate);\r\n\r\n            } catch (IOException e) {\r\n                System.out.println(\"Failed to find OrderCard.fxml\");\r\n            }\r\n        }\r\n    }\r\n\r\n    public void selectOrder(){\r\n            for(Node node: orderDisplayContainer.getChildren()){\r\n                node.setOnMouseClicked(mouseEvent -> {\r\n                    System.out.println(\"SELECT ORDER CARD DETECTION\");\r\n                    if(selectedCard != null &&  selectedCard != node){\r\n                        selectedCard.setStyle(\"-fx-border-color: #22aae1; -fx-border-width: 2; -fx-background-color: transparent\");\r\n                        selectedCard = null;\r\n                        ToggleTracking.setSelectedCardOrderNum(null);\r\n                        ToggleTracking.setIsEdit(false);\r\n                        toggleNewDelivery();\r\n                    }\r\n\r\n                    if(selectedCard != node || selectedCard == null){\r\n                            if (node instanceof HBox) {\r\n                                HBox hbox = (HBox) node;\r\n                                hbox.setStyle(\"-fx-border-color: #22aae1; -fx-border-width: 2; -fx-background-color: #f1cbcb\");\r\n\r\n                                Label findOrderNumLabel = recusiveFindLabel(node, \"orderNumDisplay\");\r\n                                if(findOrderNumLabel != null){\r\n                                    String labelText  = findOrderNumLabel.getText().substring(1); // Remove the \"#\" symbol\r\n                                    ToggleTracking.setSelectedCardOrderNum(labelText);\r\n                                    System.out.println(\"order selected\");\r\n                                    System.out.println(\"ORDER NUMBER RETRIEVED: \" + labelText);\r\n                                    System.out.println(\"OnEditDeliveyr checkv.3: \" + ToggleTracking.getSelectedCardOrderNum());\r\n                                }\r\n                            }\r\n                        selectedCard = node;\r\n\r\n                    }else{\r\n                        selectedCard.setStyle(\"-fx-border-color: #22aae1; -fx-border-width: 2; -fx-background-color: transparent\");\r\n\r\n                        selectedCard = null;\r\n                        ToggleTracking.setSelectedCardOrderNum(null);\r\n                        ToggleTracking.setIsEdit(false);\r\n\r\n                        toggleNewDelivery();\r\n                    }\r\n                });\r\n            }\r\n\r\n            if(!ToggleTracking.getIsEdit()){\r\n                for(Node node: orderDisplayContainer.getChildren()){\r\n                    node.setStyle(\"-fx-border-color: #22aae1; -fx-border-width: 2; -fx-background-color: transparent\");\r\n                }\r\n\r\n                selectedCard = null;\r\n                ToggleTracking.setSelectedCardOrderNum(null);\r\n                ToggleTracking.setIsEdit(false);\r\n\r\n                toggleNewDelivery();\r\n            }\r\n    }\r\n\r\n    public Label recusiveFindLabel(Node node, String nodeid){\r\n        if (node instanceof Label && node.getId() != null && node.getId().equals(nodeid)) {\r\n            return (Label) node;\r\n        }\r\n\r\n        if (node instanceof Parent) {\r\n\r\n            for (Node child : ((Parent) node).getChildrenUnmodifiable()) {\r\n                Label result = recusiveFindLabel(child, nodeid);\r\n                if (result != null) {\r\n                    return result;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public void sendOrderToCompleted(String selectedorderNum){\r\n        System.out.print(\"sendOrderToComplete method called!!!\");\r\n        System.out.println(\"selectOrderNum: \" + selectedorderNum);\r\n        if(selectedorderNum != null){\r\n\r\n            String tempNewMess = null;\r\n            OrderHistory tempHistory = null;\r\n            DeliveryRequisition currentOrder = deliveryFormController.retrieveOrderFromQueueSaves();\r\n            if (currentOrder!=null){\r\n                if(ToggleTracking.getCurrentTab().equals(\"Pending\")) {\r\n                    tempNewMess = deliveryFormController.createOrderHistoryMessage(\"delivery\");\r\n                    tempHistory = new OrderHistory(tempNewMess,null);\r\n                    currentOrder.getOrderStatusHistory().add(tempHistory);\r\n                    DataBaseMgmt.swapDB(currentOrder, ToggleTracking.getSelectedCardOrderNum(), \"pendingDeliveries\",\"completedDeliveries\");\r\n                    NotifyMessg.createMessg(\"delivered\", ToggleTracking.getSelectedCardOrderNum());\r\n\r\n                }\r\n\r\n                if(ToggleTracking.getCurrentTab().equals(\"Completed\")) {\r\n                    tempNewMess = deliveryFormController.createOrderHistoryMessage(\"return\");\r\n                    tempHistory = new OrderHistory(tempNewMess,null);\r\n                    currentOrder.getOrderStatusHistory().add(tempHistory);\r\n                    DataBaseMgmt.swapDB(currentOrder, ToggleTracking.getSelectedCardOrderNum(), \"completedDeliveries\",\"pendingDeliveries\");\r\n                    NotifyMessg.createMessg(\"returnToPending\", ToggleTracking.getSelectedCardOrderNum());\r\n\r\n                }\r\n            }\r\n\r\n            toggleNewDelivery();\r\n            selectedCard = null;\r\n            ToggleTracking.setSelectedCardOrderNum(null);\r\n        }\r\n    }\r\n\r\n    public void showDialogSignOut() {\r\n        Alert alert = new Alert(Alert.AlertType.INFORMATION);\r\n        alert.setHeaderText(\"Logged out\");\r\n        alert.setTitle(\"Signed out\");\r\n        alert.setContentText(\"You are signing out\");\r\n        Optional<ButtonType> result = alert.showAndWait();\r\n        signOutVbox.setVisible(false);\r\n\r\n    }\r\n\r\n    @FXML\r\n    void onSignOutClick(ActionEvent event) {\r\n        if (Employee.getCurrentLogin() != null) {\r\n            showDialogSignOut();\r\n            DataBaseMgmt.updateLoginStatus(Employee.getCurrentLogin(),\"False\");\r\n            Employee.setCurrentLogin(null);\r\n            HashMap<String,String[]> checkStoredLang = MitchTextTranslate.getStoredLang();\r\n            String[] retrieveTranslatedText = checkStoredLang.get(ToggleTracking.getLanguageTrack());\r\n\r\n            String translateExist = retrieveTranslatedText != null ? retrieveTranslatedText[10] : \"Log In\";\r\n\r\n            LoginButtonChange.setText(translateExist);\r\n            onSetDisabled(true);\r\n            adminButton.setVisible(false);\r\n            //LogInVbox.setVisible(true);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    @FXML\r\n    void onCreateUserClick(ActionEvent event){\r\n        createUserController.onCreateUserForm();\r\n        ToggleTracking.setisCreateUser(!ToggleTracking.getIsCreateUser());\r\n        adminToolsNav.setVisible(false);\r\n        settingNavbar.setVisible(false);\r\n        buttonNotToggle(settingsButton);\r\n        isToggleSettings = false;\r\n    }\r\n\r\n    public void onSearchClick() {\r\n        Queue<DeliveryRequisition> tempQueue = searchAlgolia(searchBarTextField.getText());\r\n        displaySearchResults(tempQueue);\r\n    }\r\n\r\n    /**\r\n     * turns off unneeded buttons and makes the search bar visible when you go to the reports tab\r\n     */\r\n   private void toggleReports() {\r\n        editDeliverButtonsHbox.setVisible(!editDeliverButtonsHbox.isVisible());\r\n        searchHBox.setPrefHeight((searchHBox.getHeight() + 50.0) % 100.0);\r\n        searchBarTextField.setVisible(!searchBarTextField.isVisible());\r\n\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/hospitaldeliveryinterface/controllers/HomepageController.java b/src/main/java/com/example/hospitaldeliveryinterface/controllers/HomepageController.java
--- a/src/main/java/com/example/hospitaldeliveryinterface/controllers/HomepageController.java	(revision bbea02b1357a3c4f6450f25b5d654d9dbd1fabb4)
+++ b/src/main/java/com/example/hospitaldeliveryinterface/controllers/HomepageController.java	(date 1714670576888)
@@ -17,6 +17,7 @@
 import javafx.scene.input.MouseEvent;
 import javafx.scene.layout.*;
 
+import javax.swing.*;
 import java.io.IOException;
 import java.util.*;
 
